/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   main_algo.c                                        :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: mrodrigu <mrodrigu@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2018/06/09 00:58:02 by mrodrigu          #+#    #+#             */
     Updated: 2018/06/09 04:31:49 by mrodrigu         ###   ########.fr         
/*                                                                            */
/* ************************************************************************** */

// si usamos solo un camino creo que se necesitan
//siendo h hormigas, m caminos, n nodos en el camino sin contar start
// 
// los turnos que necesitan h hormigas en un camino de n nodos son de h + n - 1 turnos
// con 2 caminos se obtiene que hay que minimizar la ecuacion |(x + n1 - 1) - (y + n2 - 1)|
donde x + y = h. Obteniendo que hay que minimizar la ecuacion  |2x - h + n1 - n2| con la que obtenemos
la cantidad de hormigas minimas para x (en el camino 1 IMPORTANTE) si x o y son decimales significa que
puede oscilar, es decir si ciertas circunstancias te dan x = 5.5 e y = 4.5 significa que las
opciones x = 5, y = 5 y x = 6, y = 4; son igual de optimas.



// el algoritmo en cuestion sera el siguiente
//dados M caminos tendremos A_1 ~ A_M donde
// cada A_i = x_i + n_i - 1 con x_1 + ... + x_M = h
// A_i designa los turnos que necesita el camino i con n_i nodos para llevar x_i hormigas
// la finalidad es minimizar la funcion:
// Î£|A_i - A_j| i = 0 ... M , j = 0 ... M , i != j
// para ello haremos un while que recorra todas las posibilidades y se quede con la menor (fuerza bruta alla vamos)
